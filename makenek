#!/bin/bash
# Nek5000 build config file
# (c) 2008,2009,2010 UCHICAGO ARGONNE, LLC

# source path
NEK_SOURCE_ROOT="$HOME/SyEM_example/Nek5000"
NEK_SOURCE_ROOT2="$NEK_SOURCE_ROOT/core"

# Fortran compiler
FC="mpif77"

# C compiler
CC="mpicc"

# pre-processor symbol list
# (set PPLIST=? to get a list of available symbols)
#PPLIST="?"

# plug-in list
PLUGIN_LIST=""


# OPTIONAL SETTINGS
# -----------------

# enable MPI (default true)
#IFMPI="false"

# auxilliary files to compile
# NOTE: source files have to located in the same directory as makenek
#       a makefile_usr.inc has to be provided containing the build rules
#USR="foo.o"
USR="avg_all.o sem.o IO_tools.o uparam.o chkpoint.o"

# linking flags
#USR_LFLAGS="-L/usr/lib -lfoo"


# generic compiler flags
G="-I./src_nek/ -I./src_usr/"
#G="-I./src_nek/ -I./src_usr/ -g -Wall -Wextra -Warray-temporaries -Wconversion -fbacktrace -ffree-line-length-0 -fcheck=all -ffpe-trap=zero,overflow,underflow -finit-real=nan"
#G="-I./src_nek/ -I./src_usr/ -ggdb -fsanitize=address -fno-omit-frame-pointer"
#valgrind -ggdb -Wunused

# optimization flags
#OPT_FLAGS_STD=""
#OPT_FLAGS_MAG=""

# enable AMG coarse grid solver (default XXT)
#IFAMG="true"
#IFAMG_DUMP="true"

# CVODE path
#CVODE_DIR=/Users/jack/Documents/phd/syem_example/cvode/lib

# MOAB/iMESH path
#MOAB_DIR="/Users/jack/Documents/phd/syem_example/moab"

# For linking to MOAB, the following might be needed:
# NOTE: compiler specific, use the appropriate one depending on your compiler
# GNU:
# USR_LFLAGS="-lmpi_cxx -lstdc++"
# Intel:
# USR_LFLAGS="-cxxlib"
# PGI:
# USR_LFLAGS="-pgcpplibs"
# USR_LFLAGS=" -lmpi_cxx -lstdc++"

# enable VisIt in situ
#  Note: you can override the lib and include paths. VISIT_LIB and VISIT_INC
#  If VISIT_STOP is set the simulation will stop after first step and wait
#  for VisIt to connect.
#IFVISIT=true
#VISIT_INSTALL="/path/to/visit/current/linux-x86_64/"
#VISIT_STOP=true

###############################################################################
# CUSTOM SOURCE FILES (in ./src_nek/)
###############################################################################
for srcfile in ./src_nek/*.f
do
    echo $srcfile
    file="${srcfile##*/}"
    echo safely moving "$file" to "$NEK_SOURCE_ROOT"
    mv -n "$NEK_SOURCE_ROOT/$file" "$NEK_SOURCE_ROOT/$file.bkp"
    cp "./src_nek/$file" "$NEK_SOURCE_ROOT/$file"
done

for srcfile in ./src_nek/*_DEF
do
    echo $srcfile
    file="${srcfile##*/}"
    echo safely moving "$file" to "$NEK_SOURCE_ROOT"
    mv -n "$NEK_SOURCE_ROOT/$file" "$NEK_SOURCE_ROOT/$file.bkp"
    cp "./src_nek/$file" "$NEK_SOURCE_ROOT/$file"
done

###############################################################################
# DONT'T TOUCH WHAT FOLLOWS !!! :)
###############################################################################

set -e

# assign version tag
mver=18.0.0

# set defaults
: ${NEK_SOURCE_ROOT:="$HOME/SyEM_example/Nek5000"}
: ${FC:="mpif77"}
: ${CC:="mpicc"}
: ${MPI:=1}
: ${PROFILING:=1}
: ${VISIT:=0}
: ${PPLIST:=""}

# overwrite source path with optional 2nd argument
if [ -d $2 ] && [ $# -eq 2 ]; then
  NEK_SOURCE_ROOT="$2"
fi

NEK_SOURCE_ROOT=`cd $NEK_SOURCE_ROOT; pwd`
echo 'using source path:' $NEK_SOURCE_ROOT

# create makefile
source $NEK_SOURCE_ROOT/core/makenek.inc

set -o pipefail
# compile 3rd_party code
make_3rd_party 2>&1 | tee -a compiler.out
make -j4 -f makefile 2>&1 | tee -a compiler.out
set +o pipefail

###############################################################################
# RESTORE ORIGINAL SOURCE
###############################################################################
for srcfile in ./src_nek/*.f
do
    file="${srcfile##*/}"
    echo restoring original $file in $NEK_SOURCE_ROOT
    mv $NEK_SOURCE_ROOT/$file.bkp $NEK_SOURCE_ROOT/$file
done

for srcfile in ./src_nek/*_DEF
do
    file="${srcfile##*/}"
    echo restoring original $file in $NEK_SOURCE_ROOT
    mv $NEK_SOURCE_ROOT/$file.bkp $NEK_SOURCE_ROOT/$file
done

exit 0
